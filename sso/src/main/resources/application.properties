单点登录：
  一处登录，处处登录，一处退出，处处退出
  用户只需要登陆一次就可以访问所有相互信任的应用系统
SSO:Single Sign On
   企业业务整合解决方案
   一票通
SSO原理：
   （1）当用户第一次访问淘宝的时候，因为还没有登录，会被引导到认账中心进行登录；
   （2）认证中心根据用户提供的登录信息，认证系统进行身份的验证，如果验证通过，
      则登录成功，并返回给用户一个认证的凭据（token）；
   （3）当用户访问天猫的时候，就会将这个token带上，作为自己认证的凭据；
   （4）应用系统接收到请求后就会把token送到认证中心进行校验，检查token的合法性；
   （5）如果通过校验，用户就可以在不用再次登录的情况下访问天猫；

SSO的实现技术：
   （1）Cookie单点登录
       使用Cookie作为媒介，存放用户凭证.
       用户登录淘宝之后，返回一个token，存入客户端的Cookie中，当用户访问天猫的时候，
     会自动带上Cookie，这样token又传给了认证中心，进行校验；

   （2）分布式Session
      1、 用户登录的时候，将会话信息，写入分布式Session；
      2、用户再次登录的时候，获取分布式Session，判断是否有登录信息，如果没有，则返回登录页面；
      3、Session一般存储到Redis中，因为他有持久化功能，如果分布式Session宕机后，重新启动之后可以从持久化存储中加载会话信息；

SSO常见方案：
   （1）OAuth2（第三方登录授权）
        第三方系统访问主系统资源，用户无需将主系统账号告知第三方，只需要通过主系统的授权，第三方就可以使用主系统的资源；

   （2）jwt
        json  Web Token，是为了在网络应用之间传递信息而执行的一种基于JSON的开放标准，难度较高，需要了解很多协议，偏向底层的东西，
       需要你基于JWT认证协议，自己开放SSO服务和权限控制

   （3）CAS（并不是并发的CAS）
       单点登录的CAS和并发的CAS完全是两码事；
       中央认证服务，Central Authentication  Service
       CAS是耶鲁大学发起的一个开源项目，为Web应用系统提供单点登录的解决方案，实现多个系统只需要登录一次，无需重复登录；
        CAS  Server
        CAS  Client
       Server和Client分别独立部署，Server负责认证工作，Client负责处理对客户端资源的访问请求，需要登陆时，重定向到Server进行认证。

       1、授权服务器保存一个全局Session，多个客户端各自保存自己的Session
       2、客户端登陆时判断自己的Session是否已经登录，如果没有登录，则重定向到服务器进行授权（带上自己的地址，作用是：用于回调）；
       3、授权服务器判断全局的Session是否已经登录，如果未登录则重定向到登录页面，提示用户登录，登录成功之后，授权服务器重定向
        到客户端上，带上ticket；
       4、客户端收到ticket之后，请求服务器获取用户信息；
       5、服务器同意客户端授权后，服务器保存用户信息到全局Session，客户端将用户信息保存到本地Session；